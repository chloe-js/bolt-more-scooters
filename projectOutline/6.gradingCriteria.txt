Grading Criteria
TASK: Use the two checklists below to guide your work. The checklists below cover two key parts of the project

The first checklist lists all the different design and coding norms that you should achieve while working on this project

The second checklist outlines all the required specification for the code that you create. This is pulled directly from the Project Specs section of this project. Bonus content is not included, but your group should strive to attempt some (or all!) of these bonus options.



A project that meets expectations should be able to check off all of the items below.

#Project Design and Coding Norms Checklist
Below is a checklist of different design and coding requirements. A fully done project should have everything listed below


UML Use Case Diagram submitted in section 3


UML Class Diagrams submitted in section 3


UML Sequence Diagrams submitted in section 4


GitHub project forked from template repository


GitHub repository has multiple commits with clear commit messages describing updates that are being pushed


Unit tests written for all components of the project

  
/5 Points
#Project Code Checklist
Below is the list of required properties/methods. There are many more that could (should) be added, if you have time! Check these off as you go, so we can give credit for them!


User class has username property


User class has password property


User class has age property


ScooterApp class has scooterSessions property (can only be called on the class not the instances)


ScooterApp class register method registers new users


ScooterApp class register method rejects user registration user already exists


ScooterApp class login method can login new users


ScooterApp class addScooter method can add scooter only if location and scooter instance is passed


ScooterApp class removeScooter method removes target scooter from the matching station array


Scooter class rent method - scooters can be rented if fully charged + not broken


Scooter class - station should be assigned to station property when docked, docked should be assigned as true


Scooter class - scooter.isBroken property should be false after repair


Scooter class recharge method - uses async and await

Refer to the example in the previous lesson: “Coding Instructions”



  
/5 Points
#Bonus
(up to 5 points extra)


For the UML diagrams, use PlantUML Syntax to include the handling of error conditions


Only users 18 years and above can ride a scooter


Only fully charged scooters can be rented


A scooter can be marked by a user as broken. This must remove the scooter from a list of available scooters and trigger maintenance personnel to repair the scooter


The maximum range of a fully charged scooter is 32 km

  


When you’re done, upload a screenshot of your unit test coverage report (aim for 100% coverage)


Choose files or drag it hereNo file chosen
  
/1 Points


